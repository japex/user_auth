UserAuth
========

ユーザ認証を行う機能を追加するプラグイン


準備
====

1. session データを保存する DB テーブルを作成する

  下記コマンドでマイグレーション・ファイルを生成し、マイグレートしてテーブルを作成する。

    $ rake db:sessions:create
    $ rake db:migrate

  同様の手順で既に DB テーブルを作成済みの場合は、そのまま使える。

2. session 関連のルーティングを設定する

  config/routes.rb に下記を追加する。

    match '/login'  => "sessions#new"    , :as => :login
    match '/logout' => "sessions#destroy", :as => :logout
    resource :session

  さらに下記を追加する。

    root :to => "(controller)#(action)"

  :to の値にはログイン成功後の表示先を指定するが、このコントローラに

    before_filter :authenticate （あるいは authenticate_as_writer,
                                  authenticate_as_administrator）

  が記述されていないと認証なしにアクションが実行されてしまうので注意する。
  他の認証が必要なコントローラについても同様の記述を追加する。

3. session データを DB に保存するための設定をする

  config/initializers/session_store.rb を編集し、

    {アプリ名}::Application.config.session_store :cookie_store, :key => ...

  の一文をコメントアウトして、
 
    {アプリ名}::Application.config.session_store :active_record_store

  の一文のコメント開始文字 # を削除して有効にする。

  さらに ApplicationController の protect_from_forgery 文から、下記のように
  コメント開始文字 # を削除して :secret => 以下を有効にし、:secret の値に
  外部からわからないような秘密の文字列を設定する。

    protect_from_forgery :secret => '47d9ded4cc750a7582fe6bc408f7b80a'
                                     # この文字列はそのまま使わないこと！

4. モデル User を用意する

  下記のように UserAuthKuma::User を継承する。

    class User < UserAuthKuma::User

  DBテーブル users のカラムは下記を用意する。

    カラム名         データ型
   --------------------------
    name             string
    hashed_password  string

  書き込み権限、管理者権限を制御したいときは、それぞれ下記の引数を取らない
  メソッドを用意する。

    writer?()        : 書き込み権限があれば true、なければ false を返す
    administrator?() : 管理者権限があれば true、なければ false を返す

  boolean のカラム is_writer, is_administrator を用意して、上記メソッドを
  それぞれ対応する属性を返すように定義すればよい。

5. UsersController を用意する

  下記のように UserAuthKuma::UsersController を継承する。

    class UsersController < UserAuthKuma::UsersController

  UserAuthKuma::UsersController には下記のメソッドが実装されている。

    change_password() : view 'change_password' をレンダリングする
    update_password() : view 'change_password' からデータを受け取って
                        current_user のパスワードを変更する

  ...(NOT finished)...


6. ユーザ定義の定数ファイルを用意する

  下記の内容のファイルを config/initializers の下に適当なファイル名
  （例えば 00_user_constant.rb など）で用意する。
  数値自体は任意の値に設定する。

    module UserConstant
      SESSION_TIMEOUT_IN_MIN = 30

      MIN_LENGTH_OF_NAME     =  5
      MAX_LENGTH_OF_NAME     = 50
      MIN_LENGTH_OF_PASSWORD =  4
      MAX_LENGTH_OF_PASSWORD = 20

      KEY_FOR_LOGGED_OUT_NOTICE      = "helpers.notice.session.logged_out"
      KEY_FOR_INVALID_LOGIN_NOTICE   = "helpers.notice.session.invalid_login"
      KEY_FOR_SESSION_TIMEOUT_NOTICE = "helpers.notice.session.timeout"
    end

  最後の KEY_FOR_SESSION_TIMEOUT_NOTICE の値については後述する。

7. app/views/layouts/application.html.erb にログアウト用リンクなどを追加する。

  下記、あるいは同等なコードを適当な箇所に追加する（このファイルである必要はない）。

    <% if logged_in? -%>
      <%= link_to t("helpers.link.logout"), logout_path %>
    <% end -%>

  また、yield 文の前あたりに下記を追加する。

    <%= content_tag :p, notice, :class => "notice" if notice.present? %>
    <%= content_tag :p, alert , :class => "alert"  if alert .present? %>

8. app/views/sessions/new.html.erb を用意する

  ===================================================================
  | 現段階では lib/app/views/sessions/_new_user_auth.html.erb に    |
  | シンボリック・リンクを張るか、あるいはコピーして使ってください。|
  | そのうち、もっといいやり方を考えます。                          |
  ===================================================================

  上記ファイルを使う必要はないが、フォームのサブミット先は session_path に
  する必要がある。

9. 国際化対応の翻訳ファイルを用意する

  下記の箇所の表示文字列は国際化対応としてあるので、config/locales
  ディレクトリに現在のロケール用の「翻訳ファイル」(translation file)
  を用意する必要がある。

    lib/app/controllers/sessions_controller.rb (SessionController)
      "helpers.notice.session.logged_out"
      "helpers.notice.session.invalid_login"

    lib/app/views/sessions/new.html.erb
      "helpers.page_title.sessions.new"
      "helpers.label.session.name"
      "helpers.label.session.password"
      "helpers.submit.login"

    lib/app/views/users/change_password.html.erb
      "helpers.page_title.users.change_password"
      "activerecord.model.user"
      "activerecord.errors.template.header.other"
      "activerecord.errors.template.body"
      "helpers.label.user.old_password" (f.label :old_password)
      "helpers.label.user.new_password" (f.label :new_password)
      "helpers.label.user.password_confirmation" (f.label :password_confirmation)
      "helpers.submit.change"
TODO: => add sample below

    UserConstant::KEY_FOR_SESSION_TIMEOUT_NOTICE の値として...
      "helpers.notice.session.timeout"
      （文字列表示箇所は lib/user_auth/action_controller_override.rb）

    6. で app/views/layouts/application.html.erb に追加
      "helpers.link.logout"

  日本語を表示する場合は config/application.rb に以下を追加して、

    config.i18n.default_locale = :ja

  config/locales ディレクトリに ja.yml を用意する。一般的用途のファイルは
  下記よりダウンロードできる。

    https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml

  件の箇所に対応する部分は下記のようになる。もちろん上記の t("...") 内の記述に
  対応してさえいればどのような形式でも構わない。

    ja:
      ......

      helpers:
        ......

        submit:
          ......
          login: "ログイン"

        page_title:
          ......
          sessions:
            new: "ログインしてください"
          ......

        label:
          session:
            name: "ユーザ名"
            password: "パスワード"
          ......

        link:
          logout: "ログアウト"
          change_password: "パスワードの変更"
          ......

        notice:
          ......
          session:
            logged_in: "ログインしました"
            logged_out: "ログアウトしました"
            invalid_login: "ユーザ名／パスワードの組み合わせが正しくありません"
            timeout: "%{timeout}分間操作がありませんでしたので自動的にログアウトしました"


  先にあった KEY_FOR_SESSION_TIMEOUT_NOTICE の値を "helpers.notice.session.timeout"
  のまま使用した場合は上記のように ja.yml に指定する。%{timeout} の部分には
  UserConstant で SESSION_TIMEOUT_IN_MIN に指定した値が入る。
  KEY_FOR_SESSION_TIMEOUT_NOTICE の値は ja.yml に対応するものがあれば
  どのような形でも構わない。
  先にあった KEY_FOR_SESSION_TIMEOUT_NOTICE の値を "helpers.notice.session.timeout"
  "helpers.notice.session.logged_out" と "helpers.notice.session.invalid_login" は
  本プラグイン中の SessionController


使用方法
========

アクセス制限をかけたいコントローラに、例えば、下記のような記述をする。

  class LimitedAccessController < ApplicationController
    before_filter :authenticate
    before_filter :authenticate_as_writer, :only => [:new, :edit, :create, :update, :destroy]
    before_filter :authenticate_as_administrator, :only => [:destroy]

    ...

この場合は、すべてのアクションに先立ってユーザ認証が必要になる。new, edit, create,
update, destroy については、メソッド writer? が true を返すユーザのみがユーザ認証を
経たのちに アクセス可能になり、さらに destroy はメソッド administrator? が true に
設定されたユーザのみに 制限がかかる。メソッド writer? や administrator? がクラス
User に存在しない場合は、各々アクセスはできない。

認証後も module UserConstant 内の SESSION_TIMEOUT_IN_MIN に設定した時間がページ操作を
しないまま 経過すると、自動的にログアウトされる。

また、下記のヘルパー・メソッドが使えるようになっている。

  current_user() : 現在のログインユーザを返す。ログインしていなければ nil を返す
  logged_in?()   : ログインしているか評価する。ログインしていれば true、していなければ false を返す


ファイル
========

インストールされるファイルは以下のとおり。

  init.rb
  install.rb
  MIT-LICENSE
  Rakefile
  README
  uninstall.rb
  lib/user_auth.rb
  lib/user_auth/action_controller_override.rb
  lib/app/controllers/sessions_controller.rb
  lib/app/helpers/sessions_helper.rb
  lib/app/models/sha1_salted_encryptor.rb
  lib/app/models/user_auth_kuma
  lib/app/models/user_auth_kuma/user.rb
  lib/app/views/sessions
  lib/app/views/sessions/_new_user_auth.html.erb
  test/action_controller_override_test.rb
  test/sessions_controller_test.rb
  test/sessions_helper_test.rb
  test/sha1_salted_encryptor_test.rb
  test/test_helper.rb
  test/user_auth_test.rb


Copyright (c) 2011 [Japan Petroleum Exploration co., ltd.], released under the MIT license

