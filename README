UserAuth
========

ユーザ認証を行う機能を追加するプラグイン
Rails 3 のみに対応


機能
====

- ユーザ認証によりアクセス制限を行う。

- パスワードは SHA-1 により暗号化されて DB に保存される。

- before_filter :authenticate（あるいは :authenticate_as_writer、
  または :authenticate_as_administrator）の対象となるアクションに
  認証手続きなしに、あるいは権限不足でアクセスするとログイン画面
  （名前付きルート login_path）にリダイレクトする。

    authenticate                  : ユーザ認証を必要とする
    authenticate_as_writer        : ユーザ認証と書き込み権限を必要とする
    authenticate_as_administrator : ユーザ認証と管理者権限を必要とする

  書き込み権限、および管理者権限はそれぞれ User#writer?(),
  User#administrator?() で確認される。

- change_password_user_path(current_user) に遷移することによりパスワード
  変更画面が表示される。

- users_path に遷移することによりユーザ一覧画面が表示される。
  ユーザ一覧画面より、ユーザの新規作成・編集・削除を行うことができる。

- 下記のヘルパー・メソッドが追加される。

    logged_in?()   : ログインしているか評価する
    current_user() : 現在のログインユーザを返す。ログインしていなければ nil を返す


準備
====

1. session データを保存する DB テーブルを作成する

  下記コマンドでマイグレーション・ファイルを生成し、マイグレートを
  実行してテーブルを作成する。

    $ rake db:sessions:create
    $ rake db:migrate

  同様の手順で既に DB テーブルを作成済みの場合は、そのまま使える。

2. データベース・テーブル users を用意する

  カラムは下記を用意する。

    カラム名          データ型  用途
   -------------------------------------------------------------
    name              string    ユーザ名
    hashed_password   string    ハッシュ値に変換されたパスワード

  マイグレーションを使うなら以下のようになる。

    rails generate model user name:string hashed_password:string

2-1. 書き込み権限、管理者権限を制御したいときは、上記に加えて、それぞれ下記を
     用意する

    カラム名          データ型  用途
   ------------------------------------------------------------
    is_writer         boolean   書き込み権限を持つ場合は true
    is_administrator  boolean   管理者権限を持つ場合は true

  UserAuthKuma::User には既に下記のメソッドが定義されており、それぞれ
  カラム is_writer、is_administrator が定義されていれば、対応するカラムの
  値を返す。対応するカラムが定義されていない場合は常に false を返す。

    writer?()        : 書き込み権限があれば true、なければ false を返す
    administrator?() : 管理者権限があれば true、なければ false を返す

  あるいは User に上記のメソッドをオーバーライドするメソッドを定義してもよい。

3. Rails のプロジェクトルートで以下を実行する

    $ ./vendor/plugins/user_auth/script/prepare.rb [-n|--nobackup]

      -n|--nobackup :  ファイルの内容を変更したときのバックアップファイルを作成しない

  上記コマンドにより修正、あるいは新規作成されるファイルは以下のとおり。
  詳細な変更内容は、後述の備考を参照のこと。

    修正       : config/initializers/session_store.rb
    修正       : app/controllers/application_controller.rb
    修正       : config/routes.rb
    修正or新規 : app/models/user.rb
    修正or新規 : app/controllers/users_controller.rb
    新規作成   : config/initializers/00_user_auth_kuma_constant.rb
    修正       : app/views/layouts/application.html.erb
    修正       : config/application.rb
    新規作成   : config/locales/ja.yml
    新規作成   : public/stylesheets/user_auth.css

4. ユーザ認証によるアクセス制限を各コントローラに設定する

  before_filter :authenticate（あるいは :authenticate_as_writer、
  または :authenticate_as_administrator）をアクセス制限対象となる
  アクションに設定する。

    authenticate                  : ユーザ認証を必要とする
    authenticate_as_writer        : ユーザ認証と書き込み権限を必要とする
    authenticate_as_administrator : ユーザ認証と管理者権限を必要とする

  例えば、

    before_filter :authenticate

  を記述したコントローラのすべてのアクションが、あらかじめユーザ認証を
  受けておかないと実行できないようになる（実際はログイン画面に遷移される）。

5. ルートパスを設定する

  config/routes.rb の最下部あたりの

    root :to => "controller_name#action_name"

  の 'controller_name' と 'action_name' を然るべきものに修正する。

  これはログイン成功後のリダイレクト先になるが、このアクションが上記 4. の
  before_filter :authenticate（あるいは :authenticate_as_writer、 または
  :authenticate_as_administrator）の対象になっていないとユーザ認証なしに
  アクションが実行されてしまうので注意する。

6. （必要であれば）sessions, users 用の VIEW を用意する

  プラグインには下記のファイルが用意されているが、

    app/views/sessions/new.html.erb
    app/views/users/_form.html.erb
    app/views/users/change_password.html.erb
    app/views/users/edit.html.erb
    app/views/users/index.html.erb
    app/views/users/new.html.erb

  上記のファイルを使いたくないときは Rails プロジェクトの app/views にそれぞれ用意する。
  同名のファイルがあれば、プロジェクトのものが使われる。

備考)  3. のコマンドにより、以下の a. ～ h. が自動実行される。

  (a. session データを DB に保存するための設定をする)

    config/initializers/session_store.rb の

      {アプリ名}::Application.config.session_store :cookie_store, :key => ...

    の一文をコメントアウトし、
   
      {アプリ名}::Application.config.session_store :active_record_store

    の一文のコメント開始文字 # を削除して有効にする。

    さらに ApplicationController の protect_from_forgery 文を下記のように変更する。

      protect_from_forgery :secret => '（任意のランダムな文字列）'

  (b. session, user 関連、および root のルーティングを設定する)

    config/routes.rb に下記を追加する。

      match '/login'  => "sessions#new"    , :as => :login
      match '/logout' => "sessions#destroy", :as => :logout

      resource :session, :only => [:new, :create, :destroy]

      resources :users, :except => [:show] do
        member do
          get 'change_password', 'reset_password'
          put 'update_password'
        end
      end

      root :to => "controller_name#action_name"

  (c. モデル User を用意する)

    下記のように UserAuthKuma::User を継承するように既存のモデルを修正、
    あるいは存在しなければ新規に作成する。

      class User < UserAuthKuma::User

  (d. UsersController を用意する)

    下記のように UserAuthKuma::UsersController を継承するに既存のコントローラを
    修正、あるいは存在しなければ新規に作成する。

      class UsersController < UserAuthKuma::UsersController
        before_filter :authenticate, :only => [:change_password, :update_password]
        before_filter :authenticate_as_administrator,
                                   :except => [:change_password, :update_password]

  (e. ユーザ定義の定数ファイルを用意する)

    config/initializers/00_user_auth_kuma_constant.rb を下記の内容で用意する。
    数値自体は任意の値に変更してよい。

      module UserAuthKuma
        module Constant
          SESSION_TIMEOUT_IN_MIN =  5

          MIN_LENGTH_OF_NAME     =  5
          MAX_LENGTH_OF_NAME     = 50
          MIN_LENGTH_OF_PASSWORD =  4
          MAX_LENGTH_OF_PASSWORD = 20

          module TemporaryPassword
            LENGTH     = 12
            NUM_DIGITS =  2
            NUM_SIGNS  =  1
            NUM_UPPERS =  2
            NUM_LOWERS = LENGTH - NUM_DIGITS - NUM_SIGNS - NUM_UPPERS

            SIGNS = %w(! # $ % & + - * / = @ ?)
          end

          CANCEL_PATH_FROM_USERS_INDEX     = nil
          CANCEL_PATH_FROM_CHANGE_PASSWORD = nil
        end
      end

  (f. app/views/layouts/application.html.erb にリンクなどを追加する)

    下記を yield 文の直前に下記を追加する。

      <% if logged_in? -%>
        <%= link_to t("helpers.link.user.change_password"), change_password_user_path(current_user) %>
        <%= link_to t("helpers.link.logout"), logout_path %>
      <% end -%>

      <%= content_tag :p, notice, :class => "notice" if notice.present? %>
      <%= content_tag :p, alert , :class => "alert"  if alert .present? %>

  (g. 国際化対応の日本語翻訳ファイルを用意する)

    config/application.rb に以下を追加する。

      config.i18n.default_locale = :ja
      config.i18n.load_path += Dir[Rails.root.join('vendor/plugins/user_auth/locales/**/*.{rb,yml}')]

    さらに、下記よりダウンロードした一般用途のファイル ja.yml を config/locales
    ディレクトリに配置する。

      https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml

  (h. スタイルシートを用意する)

    フォームのエラー表示用の CSS ファイル user_auth.css を public/stylesheets に
    コピーする。


使用方法
========

アクセス制限をかけたいコントローラに、例えば、下記のような記述をする。

  class LimitedAccessController < ApplicationController
    before_filter :authenticate
    before_filter :authenticate_as_writer, :only => [:new, :edit, :create, :update, :destroy]
    before_filter :authenticate_as_administrator, :only => [:destroy]

    ...

上記のように設定した場合は、すべてのアクションに先立ってユーザ認証が必要になる。
new, edit, create, update, destroy については、メソッド writer? が true を返す
ユーザのみがユーザ認証を経たのちに アクセス可能になり、さらに destroy はメソッド
administrator? が true を返すユーザのみに制限がかかる。メソッド writer? や
administrator? がクラス User に存在しない場合は、各々アクセスはできない。

認証後も module UserConstant 内の SESSION_TIMEOUT_IN_MIN に設定した時間がページ操作を
しないまま 経過すると、自動的にログアウトされる。

下記のパスを使用すればユーザ管理画面に遷移する。

  change_password_user_path : 現在のログインユーザのパスワード変更画面
  users_path                : ユーザ一覧画面（ユーザの新規作成・編集・削除が行える）

また、下記のヘルパー・メソッドが使えるようになっている。

  logged_in?()   : ログインしているか評価する。ログインしていれば true、していなければ false を返す
  current_user() : 現在のログインユーザを返す。ログインしていなければ nil を返す


ファイル
========

インストールされるファイルは以下のとおり。

.
|-- MIT-LICENSE
|-- README
|-- Rakefile
|-- app
|   `-- views
|       |-- sessions
|       |   `-- new.html.erb
|       |-- system
|       |   `-- _error_messages_for.html.erb
|       `-- users
|           |-- _form.html.erb
|           |-- change_password.html.erb
|           |-- edit.html.erb
|           |-- index.html.erb
|           `-- new.html.erb
|-- init.rb
|-- install.rb
|-- lib
|   |-- app
|   |   |-- controllers
|   |   |   |-- sessions_controller.rb
|   |   |   `-- user_auth_kuma
|   |   |       `-- users_controller.rb
|   |   |-- helpers
|   |   |   |-- sessions_helper.rb
|   |   |   `-- user_auth_kuma
|   |   |       |-- form_helper.rb
|   |   |       `-- users_helper.rb
|   |   `-- models
|   |       |-- sha1_salted_encryptor.rb
|   |       `-- user_auth_kuma
|   |           `-- user.rb
|   |-- user_auth
|   |   `-- action_controller_override.rb
|   `-- user_auth.rb
|-- locales
|   `-- ja.yml
|-- script
|   |-- application_controller_modifier.rb
|   |-- command_line_argument_parser.rb
|   |-- config_application_modifier.rb
|   |-- constant_creator.rb
|   |-- css_user_auth_copier.rb
|   |-- file_modifier.rb
|   |-- layout_template_modifier.rb
|   |-- locale_ja_copier.rb
|   |-- modifier_or_file_creator.rb
|   |-- prepare.rb
|   |-- routes_adder.rb
|   |-- session_store_modifier.rb
|   |-- stream_editor.rb
|   |-- templates
|   |   |-- 00_user_auth_kuma_constant.rb
|   |   `-- ja.yml
|   |-- test
|   |   `-- stream_editor_test.rb
|   |-- user_modifier.rb
|   `-- users_controller_modifier.rb
|-- stylesheets
|   `-- user_auth_kuma.css
|-- test
|   |-- action_controller_override_test.rb
|   |-- fixtures
|   |   `-- users.yml
|   |-- sessions_controller_test.rb
|   |-- sessions_helper_test.rb
|   |-- sha1_salted_encryptor_test.rb
|   |-- test_helper.rb
|   |-- user_auth_test.rb
|   |-- user_test.rb
|   |-- users_controller_test.rb
|   `-- users_helper_test.rb
`-- uninstall.rb


Copyright (c) 2011 [Japan Petroleum Exploration co., ltd.], released under the MIT license

