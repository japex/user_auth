UserAuth
========

ユーザ認証を行う機能を追加するプラグイン


機能
====

- ユーザ認証によりアクセス制限を行う。

- パスワードは SHA-1 により暗号化されて DB に保存される。

- before_filter :authenticate（あるいは :authenticate_as_writer、
  または :authenticate_as_administrator）の対象となるアクションに
  認証手続きなしに、あるいは権限不足でアクセスするとログイン画面
  （名前付きルート login_path）にリダイレクトする。

    authenticate                  : ユーザ認証を必要とする
    authenticate_as_writer        : ユーザ認証と書き込み権限を必要とする
    authenticate_as_administrator : ユーザ認証と管理者権限を必要とする

  書き込み権限、および管理者権限はそれぞれ User#writer?(),
  User#administrator?() で確認される。

- change_password_user_path(current_user) に遷移することによりパスワード
  変更画面が表示される。

- users_path に遷移することによりユーザ一覧画面が表示される。
  ユーザ一覧画面より、ユーザの新規作成・編集・削除を行うことができる。

- 下記のヘルパー・メソッドが追加される。

    logged_in?()   : ログインしているか評価する
    current_user() : 現在のログインユーザを返す。ログインしていなければ nil を返す


準備
====

1. session データを保存する DB テーブルを作成する

  下記コマンドでマイグレーション・ファイルを生成し、マイグレートを
  実行してテーブルを作成する。

    $ rake db:sessions:create
    $ rake db:migrate

  同様の手順で既に DB テーブルを作成済みの場合は、そのまま使える。

2. session データを DB に保存するための設定をする

  config/initializers/session_store.rb を編集し、

    {アプリ名}::Application.config.session_store :cookie_store, :key => ...

  の一文をコメントアウトして、
 
    {アプリ名}::Application.config.session_store :active_record_store

  の一文のコメント開始文字 # を削除して有効にする。

  さらに ApplicationController の protect_from_forgery 文から、下記のように
  コメント開始文字 # を削除して :secret => 以下を有効にし、:secret の値に
  外部からわからないような秘密の文字列を設定する。

    protect_from_forgery :secret => '47d9ded4cc750a7582fe6bc408f7b80a'
                                     # この文字列をそのまま使わないこと！

3. session, user 関連、および root のルーティングを設定する

  config/routes.rb に下記を追加する。

    match '/login'  => "sessions#new"    , :as => :login
    match '/logout' => "sessions#destroy", :as => :logout

    resource :session, :only => [:new, :create, :destroy]

    resources :users, :except => [:show] do
      member do
        get 'change_password'
        put 'update_password'
      end
    end

    root :to => "controller_name#action_name"

  root_path はログイン成功後のリダイレクト先になるが、 このアクションが

    before_filter :authenticate （あるいは :authenticate_as_writer,
                                  :authenticate_as_administrator）

  の対象になっていないと認証なしにアクションが実行されてしまうので注意する。
  認証が必要な、その他のコントローラについても同様の記述を追加する。

4. モデル User を用意する

  下記のように UserAuthKuma::User を継承する。

    class User < UserAuthKuma::User

  DBテーブル users のカラムは下記を用意する。

    カラム名          データ型  用途
   -------------------------------------------------------------
    name              string    ユーザ名
    hashed_password   string    ハッシュ値に変換されたパスワード

4-1. 書き込み権限、管理者権限を制御したいときは、上記に加えて、それぞれ下記を
     用意する。

    カラム名          データ型  用途
   ------------------------------------------------------------
    is_writer         boolean   書き込み権限を持つ場合は true
    is_administrator  boolean   管理者権限を持つ場合は true

  UserAuthKuma::User には既に下記のメソッドが定義されており、それぞれ
  カラム is_writer、is_administrator が定義されていれば、対応するカラムの
  値を返す。対応するカラムが定義されていない場合は常に false を返す。

    writer?()        : 書き込み権限があれば true、なければ false を返す
    administrator?() : 管理者権限があれば true、なければ false を返す

  あるいは User に上記のメソッドをオーバーライドするメソッドを定義してもよい。

5. UsersController を用意する

  下記のように UserAuthKuma::UsersController を継承する。
  before_filter :authenticate (あるいは :authenticate_as_writer,
  :authenticate_as_administrator）の設定はセキュリティ上重要なので
  必ず漏れがないように注意する。

    class UsersController < UserAuthKuma::UsersController
      before_filter :authenticate, :only => [:change_password, :update_password]
      before_filter :authenticate_as_administrator,
                                 :except => [:change_password, :update_password]

6. ユーザ定義の定数ファイルを用意する

  下記の内容のファイルを config/initializers の下に適当なファイル名（例えば
  00_user_constant.rb など）で用意する。数値自体は任意の値に設定する。

    module UserConstant
      SESSION_TIMEOUT_IN_MIN = 30

      MIN_LENGTH_OF_NAME     =  5
      MAX_LENGTH_OF_NAME     = 50
      MIN_LENGTH_OF_PASSWORD =  4
      MAX_LENGTH_OF_PASSWORD = 20
    end

  最後の KEY_FOR_SESSION_TIMEOUT_NOTICE の値については後述する。

7. app/views/layouts/application.html.erb にリンクなどを追加する

  下記、あるいは同等なコードを適当な箇所に追加する。

    <% if logged_in? -%>
      <%= link_to t("helpers.link.logout"), logout_path %>
    <% end -%>

  また、yield 文の前あたりに下記を追加する。

    <%= content_tag :p, notice, :class => "notice" if notice.present? %>
    <%= content_tag :p, alert , :class => "alert"  if alert .present? %>

8. 国際化対応の日本語翻訳ファイルを用意する

  config/application.rb に以下を追加する。

    config.i18n.default_locale = :ja
    config.i18n.load_path += Dir[Rails.root.join('vendor/plugins/user_auth/locales/**/*.{rb,yml}')]

  一般用途のファイルは下記よりダウンロードできるので、config/locales
  ディレクトリに配置する。

    https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml

9. スタイルシートを用意する

  vendor/plugins/user_auth/stylesheets/user_auth.css をコピーして使う

10. （必要であれば）sessions, users 用の VIEW を用意する

  プラグインには下記のファイルが用意されているが、

    app/views/sessions/new.html.erb
    app/views/users/_form.html.erb
    app/views/users/change_password.html.erb
    app/views/users/edit.html.erb
    app/views/users/index.html.erb
    app/views/users/new.html.erb

  を使いたくないときはプロジェクトの app/views にそれぞれ用意する。
  同名のファイルがあれば、プロジェクトのものが使われる。


使用方法
========

アクセス制限をかけたいコントローラに、例えば、下記のような記述をする。

  class LimitedAccessController < ApplicationController
    before_filter :authenticate
    before_filter :authenticate_as_writer, :only => [:new, :edit, :create, :update, :destroy]
    before_filter :authenticate_as_administrator, :only => [:destroy]

    ...

上記のように設定した場合は、すべてのアクションに先立ってユーザ認証が必要になる。
new, edit, create, update, destroy については、メソッド writer? が true を返す
ユーザのみがユーザ認証を経たのちに アクセス可能になり、さらに destroy はメソッド
administrator? が true を返すユーザのみに制限がかかる。メソッド writer? や
administrator? がクラス User に存在しない場合は、各々アクセスはできない。

認証後も module UserConstant 内の SESSION_TIMEOUT_IN_MIN に設定した時間がページ操作を
しないまま 経過すると、自動的にログアウトされる。

下記のパスを使用すればユーザ管理画面に遷移する。

  change_password_user_path : 現在のログインユーザのパスワード変更画面
  users_path                : ユーザ一覧画面（ユーザの新規作成・編集・削除が行える）

また、下記のヘルパー・メソッドが使えるようになっている。

  logged_in?()   : ログインしているか評価する。ログインしていれば true、していなければ false を返す
  current_user() : 現在のログインユーザを返す。ログインしていなければ nil を返す


ファイル
========

インストールされるファイルは以下のとおり。

|-- MIT-LICENSE
|-- README
|-- Rakefile
|-- app
|   `-- views
|       |-- sessions
|       |   `-- new.html.erb
|       |-- system
|       |   `-- _error_messages_for.html.erb
|       `-- users
|           |-- _form.html.erb
|           |-- change_password.html.erb
|           |-- edit.html.erb
|           |-- index.html.erb
|           `-- new.html.erb
|-- init.rb
|-- install.rb
|-- lib
|   |-- app
|   |   |-- controllers
|   |   |   |-- sessions_controller.rb
|   |   |   `-- user_auth_kuma
|   |   |       `-- users_controller.rb
|   |   |-- helpers
|   |   |   |-- sessions_helper.rb
|   |   |   `-- user_auth_kuma
|   |   |       |-- form_helper.rb
|   |   |       `-- users_helper.rb
|   |   `-- models
|   |       |-- sha1_salted_encryptor.rb
|   |       `-- user_auth_kuma
|   |           `-- user.rb
|   |-- user_auth
|   |   `-- action_controller_override.rb
|   `-- user_auth.rb
|-- locales
|   `-- ja.yml
|-- note.txt
|-- test
|   |-- action_controller_override_test.rb
|   |-- fixtures
|   |   `-- users.yml
|   |-- sessions_controller_test.rb
|   |-- sessions_helper_test.rb
|   |-- sha1_salted_encryptor_test.rb
|   |-- test_helper.rb
|   |-- user_auth_test.rb
|   |-- user_test.rb
|   |-- users_controller_test.rb
|   `-- users_helper_test.rb
`-- uninstall.rb


Copyright (c) 2011 [Japan Petroleum Exploration co., ltd.], released under the MIT license

