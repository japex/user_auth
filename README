UserAuth
========

ユーザ認証を行う機能を追加するプラグイン


準備
====

1. session データを保存する DB テーブルを作成する

  下記コマンドでマイグレーション・ファイルを生成し、マイグレートしてテーブルを作成する。

    $ rake db:sessions:create
    $ rake db:migrate

  同様の手順で既に DB テーブルを作成済みの場合は、そのまま使える。

2. session 関連のルーティングを設定する

  config/routes.rb に下記を追加する。

    match '/login'  => "sessions#new"    , :as => :login
    match '/logout' => "sessions#destroy", :as => :logout
    resource :session

  さらに下記を追加する。

    root :to => "(controller)#(action)"

  :to の値にはログイン成功後の表示先を指定するが、このコントローラに

    before_filter :authenticate （あるいは authenticate_as_writer, authenticate_as_administrator）

  が記述されていないと認証なしにアクションが実行されてしまうので注意する。
  他の認証が必要なコントローラについても同様の記述を追加する。

3. session データを DB に保存するための設定をする

  config/initializers/session_store.rb を編集し、

    {アプリ名}::Application.config.session_store :cookie_store, :key => '_hoge_session'

  の一文をコメントアウトして、
 
    {アプリ名}::Application.config.session_store :active_record_store

  の一文のコメント開始文字 # を削除して有効にする。

4. モデル User を用意する

  下記のように UserAuthKuma::User を継承する。

    class User < UserAuthKuma::User

  属性は下記を用意する

    属性名           データ型
   --------------------------
    name             string
    hashed_password  string

  書き込み権限、管理者権限を制御したいときは、それぞれ下記の属性も用意する。

    属性名            データ型
   ----------------------------
    is_writer         boolean
    is_administrator  boolean

  さらにクラス定義で ...

  ...(Under Construction)...


5. ユーザ定義の定数ファイルを用意する
  
  下記の内容のファイルを config/initializers の下に適当なファイル名
  （例えば 00_user_constant.rb など）で用意する。
  数値自体は任意の値に設定する。

    module UserConstant
      MIN_LENGTH_OF_NAME     =  5
      MAX_LENGTH_OF_NAME     = 50
      MIN_LENGTH_OF_PASSWORD =  4
      MAX_LENGTH_OF_PASSWORD = 20
    end

6. app/views/sessions/new.html.erb を用意する

  ...(Under Construction)...
  

Example
=======

Example goes here.


Copyright (c) 2011 [name of plugin creator], released under the MIT license
